"""
Results generated by FitGIFtoHBP.py are stored as list of dictionary.
This script read these results and plot some relevant quantities.
"""

import matplotlib.pyplot as plt
import numpy as np
import numpy.random as random

import cPickle as pickle

import sys
sys.path.append('../')

import glob
import bglibpy
import re
import collections
import h5py

error_labels = [
            'OK',
            'L non value encountered',
            'L did not converge',
            'L numerical instability',
            'V big drop due to exp',
            'No static threshold',
            'No dynamic threshold',
            'No spikes in dataset',
            'L singular matrix encountered',
            'No static threshold']


if __name__ == '__main__':

    quality_thresholds = {
                    'likelihood_testset': 2.,
                    'pct_var_explained_testset': 40.,
                    'DV': 2
                    }

    ignore_fit_problems = True
    result_path = "../../HBP_results/"

    # get list of gid from files:
    base_dir = "/gpfs/bbp.cscs.ch/project/proj38/singlecell/tests/150413_simplification/simulation/ReNCCv2/syn_to_soma/ca_scan_long/soma_corr_fil_somacurr/"
    path = "K5p0/Ca1p25_1/h5_ready/"
    filepaths = glob.glob(base_dir + path + "a*.h5")
    gids = [int(re.match(".*\/a(\d*).h5", f).group(1)) for f in filepaths]

    print "Total number of cells: " + str(len(gids))

    # get all raw parameters
    results = np.load(result_path + "GIFparametersHBP.npy").item()

    # get information on circuit
    bluedir = "/gpfs/bbp.cscs.ch/project/proj1/simulations/"
    blueconfig0 = "ReNCCv2/" \
                  "ca_scan_40s/K5p0/Ca1p25/BlueConfig"
    blueconfig = bluedir + blueconfig0
    ssim = bglibpy.SSim(blueconfig)
    sim = ssim.bc_simulation

    #etypes = sim.circuit.mvddb.etype_name2id_map()
    #mtypes = sim.circuit.mvddb.mtype_name2id_map()

    # note all possible metype combinations
    metypes = []
    # save all failed fits
    failed_gids = []

    # save results of fits for all succesful gids.
    # add replacements later for unsuccessful fits!
    gids_dict = collections.OrderedDict()

    # save gids of succesful fits ordered by metype.
    metypes_success_index = collections.OrderedDict()
    mtypes_success_index = collections.OrderedDict()
    etypes_success_index = collections.OrderedDict()

    # save gids of all cells.
    metypes_all_index = collections.OrderedDict()

    gids_to_metype_dict = collections.OrderedDict()


    for gid in gids:
        neuron = sim.circuit.mvddb.load_gids([gid], pbar=False)[0]
        if neuron.gid == gid:
            mtype = str(neuron.mtype_id)
            etype = str(neuron.etype_id)
            metype_str = mtype + "_" + etype
            metype_tup = (mtype, etype)
            gids_to_metype_dict[gid] = metype_tup

            if metype_tup not in metypes:
                metypes.append(metype_tup)
                metypes_success_index[metype_str] = []
                metypes_all_index[metype_str] = []

            if mtype not in mtypes_success_index:
                mtypes_success_index[mtype] = []

            if etype not in etypes_success_index:
                etypes_success_index[etype] = []

            metypes_all_index[metype_str].append(gid)

            try:
                r = results[gid].item()

                # check if no exception occured
                if ignore_fit_problems or (r['fit_problem'] == False):

                    # check if quality is high enough
                    if (r['likelihood_testset'] >= quality_thresholds['likelihood_testset'] and
                            r['pct_var_explained_testset'] >= quality_thresholds['pct_var_explained_testset'] and
                            r['model']['DV'] < quality_thresholds['DV']):

                        metypes_success_index[metype_str].append(gid)
                        mtypes_success_index[mtype].append(gid)
                        etypes_success_index[etype].append(gid)

                        # add succesful gid
                        gids_dict[gid] = r

                    else:
                        failed_gids.append(gid)
                        # print (str(gid) + " quality check failed! with"
                        #                 + " " + str(r['likelihood_testset'])
                        #                 + " " + str(r['pct_var_explained_testset'])
                        #                 + " " + str(r['model']['DV']))

                else:
                    failed_gids.append(gid)
                    # print str(gid) + " fit problem!"

            except:
                failed_gids.append(gid)
                # print str(gid) + " exception!"

        else:
            raise ValueError('Given gid was not requested!')


    print "There are " + str(len(metypes)) + " different metypes."

    print "Number of failed cells: " + str(len(failed_gids))

    for metype_tup in metypes:
        metype_str = metype_tup[0] + "_" + metype_tup[1]

        n_success = len(metypes_success_index[metype_str])
        n_total = len(metypes_all_index[metype_str])
        p_success = n_success/float(n_total) * 100.

        print ("for " + metype_str + " there are " +
                str(n_success) + " succesful cells of " +
                str(n_total) + " in total = " +
                str(p_success) + "% success")

    # replace failed cells:
    for gid in failed_gids:
        metype_tup = gids_to_metype_dict[gid]
        metype_str = metype_tup[0] + "_" + metype_tup[1]
        alternative_gids = metypes_success_index[metype_str]

        if len(alternative_gids) == 0:
            print ("failed cell " + str(gid) + " not enough" +
                    " alternative cells for metype " + metype_str +
                    " using another random mtype")
            alternative_gids = mtypes_success_index[metype_tup[0]]

        random.seed(gid)
        random.shuffle(alternative_gids)

        alt_gid = alternative_gids[0]

        alt_metype_tup = gids_to_metype_dict[alt_gid]
        alt_metype_str = alt_metype_tup[0] + "_" + alt_metype_tup[1]

        gids_dict[gid] = gids_dict[alt_gid]

    print ("Number of cells simplified:" + str(len(gids_dict.items())))

    if (len(gids_dict.items()) != len(gids)):
        raise ValueError('Not all cells accounted for!')


    with h5py.File(result_path + 'gif_params' + '.h5', 'w') as f:

        for gid, gid_dict in gids_dict.iteritems():

            model = gid_dict['model']

            C = model['C']
            El = model['El']
            gl = model['gl']
            T_ref = model['T_ref']
            Vt_star = model['Vt_star']
            Vr = model['Vr']
            DV = model['DV']
            lambda0 = model['lambda0']

            n_eta = model['eta'][0]
            if n_eta > 3:
                raise Exception("Number of filter coefficients too large "
                                "only 3 coefficients implemented in NEURON")

            if n_eta >= 1:
                tau_eta1 = model['eta'][1][0]
                a_eta1 = model['eta'][2][0]
            else:
                tau_eta1 = 1
                a_eta1 = 0

            if n_eta >= 2:
                tau_eta2 = model['eta'][1][1]
                a_eta2 = model['eta'][2][1]
            else:
                tau_eta2 = 1
                a_eta2 = 0

            if n_eta >= 3:
                tau_eta3 = model['eta'][1][2]
                a_eta3 = model['eta'][2][2]
            else:
                tau_eta3 = 1
                a_eta3 = 0

            n_gamma = model['gamma'][0]
            if n_gamma > 3:
                raise Exception("Number of filter coefficients too large "
                                "only 3 coefficients implemented in NEURON")

            if n_gamma >= 1:
                tau_gamma1 = model['gamma'][1][0]
                a_gamma1 = model['gamma'][2][0]
            else:
                tau_gamma1 = 1
                a_gamma1 = 0

            if n_gamma >= 2:
                tau_gamma2 = model['gamma'][1][1]
                a_gamma2 = model['gamma'][2][1]
            else:
                tau_gamma2 = 1
                a_gamma2 = 0

            if n_gamma >= 3:
                tau_gamma3 = model['gamma'][1][2]
                a_gamma3 = model['gamma'][2][2]
            else:
                tau_gamma3 = 1
                a_gamma3 = 0

            dataset = np.array([
                        C, El, gl, T_ref, Vt_star, Vr, DV, lambda0,
                        tau_eta1, tau_eta2, tau_eta3,
                        a_eta1, a_eta2, a_eta3,
                        tau_gamma1, tau_gamma2, tau_gamma3,
                        a_gamma1, a_gamma2, a_gamma3,
                        ])

            f.create_dataset('a'+str(gid), data=dataset)

    print ("Number of parameters: " + str(len(dataset)))
